#!/usr/bin/env bash


# functions
gnudate() {
  if [ $(uname) = "Darwin" ]; then gdate "$@"; else date "$@"; fi
}

errorcheck() {
  if [ $1 -ne 0 ]; then report_errors=1; fi
}

reset_report_starttime() {
  report_starttime=$(gnudate +%s%N)
}

reportJSON() {

  # assumes data[], tonumber[] and $errors exist as global variables
  # - data[] : associative array containing key/value pairs
  # - jqoperators[] : associative array with the same keys as data[], if present appended as instruction to jq
  # - $errors : set to 1 if errors were found generating report data

  # init
  local jqinput

  # build jq command
  # first, add some meta data about the report
  jqinput="{ report:  {
                        duration: \"$[($(gnudate +%s%N) - $report_starttime)/1000000]\" |tonumber,
                        timestamp: \"$(gnudate +%s)\" | tonumber,
                        errors: \"$report_errors\" | test(\"1\"),
                        generator: \"${BASH_SOURCE[1]}\"
                      }"

  # second, add the key value pairs, with operators where needed
  for key in ${!data[@]}; do
    if test "${jqoperators[${key}]+isset}"; then
      jqinput="$jqinput, ${key}: \"${data[${key}]}\"${jqoperators[${key}]}"
    else
      jqinput="$jqinput, ${key}: \"${data[${key}]}\""
    fi
  done

  # finally, close it all off
  jqinput=$jqinput" }"

  # return the result from jq
  printf '%s\n' "$(jq -n "$jqinput")"

}

# init
declare -A settings
declare -A data
declare -A jqoperators

report_errors=0
report_starttime=$(gnudate +%s%N)
settings[mqtt_broker]=navel.local
