# ----------------
# DEFAULT SETTINGS
# ----------------

DEBUG_MODE=0
DEBUG_TIMESTAMP=0
VERBOSE_MODE=1
VERBOSE_TIMESTAMP=0
SHA=0
ANOTHER=0

# ---------------
# SYSTEM SETTINGS
# ---------------

BIN_GROWL=/usr/local/bin/growlnotify
BIN_IFCONFIG=/sbin/ifconfig
BIN_LOGGER=/usr/bin/logger
BIN_SYSTEMPROFILER=/usr/sbin/system_PREofiler


# =========================================================================
# DO NOT EDIT ANYTHING BELOW THIS LINE UNLESS YOU KNOW WHAT YOU'RE DOING!!!
# =========================================================================

# =========
# FUNCTIONS
# ---------

# -------------------------------------------------------------------------
# Displays a commonly formatted debug message, if debugging mode is enabled
# -------------------------------------------------------------------------

function print_debug {

  if [ $DEBUG_MODE = "1" ]; then

       printf '%s\n' "$ME: Debug: $1"
  fi
}



# ----------------------------------------------------------------------
# Displays a commonly formatted user message, if verbose mode is enabled
# ----------------------------------------------------------------------

function print_verbose {

  if [ $VERBOSE_MODE = "1" ]; then
  		
       printf '%s\n' "$1"
  fi
}



# ----------------------------------------------------------
# Writes a commonly formatted notification to the system log
# ----------------------------------------------------------

function print_logger {

	if [ -e $BIN_LOGGER ]; then 
		$BIN_LOGGER -t $ME "$1"
	fi

}



# ------------------------------------------------------
# Displays a commonly formatted notification using Growl
# ------------------------------------------------------

function print_growl {

  if [ -e $BIN_GROWL ]; then
       $BIN_GROWL -m "$1"   
  fi
}

function die {

	printf '%s\n' "$ME: Fatal: $1"
	exit 1
}

function posixTime {

  printf '%s\n' $(date +%s)

}


function oneOrMore () {

  local count=$1
  local word=$2

  if [ $count = 1 ]; then 

    echo "$word"

  else 

    echo "$word""s"

  fi 


}


function howLongAgo () {

  local time_to_evaluate=$1

  local days=$(scale=0; echo "$time_to_evaluate/86400" | bc)
  local hours=$(scale=0; echo "($time_to_evaluate-($days*86400))/3600" | bc)
  local minutes=$(scale=0; echo "($time_to_evaluate-($days*86400)-($hours*3600))/60" | bc)
  local seconds=$(scale=0; echo "$time_to_evaluate-($days*86400)-($hours*3600)-($minutes*60)" | bc)

  if [ $days -eq 0 ]; then 

    if [ $hours -eq 0 ]; then 

      if [ $minutes -eq 0 ]; then 


	     printf '%s\n' "$seconds $(oneOrMore $seconds "second")"

      else

        printf '%s\n' "$minutes $(oneOrMore $minutes "minute")"

      fi 

    else   

      printf '%s\n' "$hours $(oneOrMore $hours "hour")"

    fi 

  else 

    printf '%s\n' "$days $(oneOrMore $days "day")"

  fi 

}

function lastModified() {

        NOW=`date +%s`
        LASTMODIFIED=`stat -f "%m" $1`
        DIFFERENCE=`echo $NOW - $LASTMODIFIED | bc`

        if [ "$DIFFERENCE" -lt "300" ]; then                            CONCLUSION="just now" 
        else if [ "$DIFFERENCE" -lt "3600" ]; then                      CONCLUSION="in the last hour"
             else if [ "$DIFFERENCE" -lt "86400" ]; then

                                TODAY_H=`date +%k`
                                TODAY_M=`date +%M`
                                TODAY_S=`date +%S`
                                TODAY=`eval echo $TODAY_H*3600+$TODAY_M*60+$TODAY_S | bc`

                            if [ "$DIFFERENCE" -lt "$TODAY" ]; then     CONCLUSION="earlier today"
                    else                                                CONCLUSION="yesterday"
                    fi
                  else                                                  CONCLUSION="more than 24 hours ago"
                  fi 
             fi
        fi 
        echo $CONCLUSION
}

